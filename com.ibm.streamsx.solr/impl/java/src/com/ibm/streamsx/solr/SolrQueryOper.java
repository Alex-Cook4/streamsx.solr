/* Generated by Streams Studio: January 6, 2016 4:43:23 PM EST */
package com.ibm.streamsx.solr;


import org.apache.log4j.Logger;

import com.ibm.streams.operator.AbstractOperator;
import com.ibm.streams.operator.OperatorContext;
import com.ibm.streams.operator.OutputTuple;
import com.ibm.streams.operator.StreamingData.Punctuation;
import com.ibm.streams.operator.StreamingInput;
import com.ibm.streams.operator.StreamingOutput;
import com.ibm.streams.operator.Tuple;
import com.ibm.streams.operator.TupleAttribute;
import com.ibm.streams.operator.log4j.TraceLevel;
import com.ibm.streams.operator.model.InputPortSet;
import com.ibm.streams.operator.model.InputPortSet.WindowMode;
import com.ibm.streams.operator.model.InputPortSet.WindowPunctuationInputMode;
import com.ibm.streams.operator.model.InputPorts;
import com.ibm.streams.operator.model.Libraries;
import com.ibm.streams.operator.model.OutputPortSet;
import com.ibm.streams.operator.model.Parameter;
import com.ibm.streams.operator.model.OutputPortSet.WindowPunctuationOutputMode;
import com.ibm.streams.operator.model.OutputPorts;
import com.ibm.streams.operator.model.PrimitiveOperator;

@Libraries("opt/downloaded/*")
@PrimitiveOperator(name="SolrQuery", namespace="com.ibm.streamsx.solr",
description="Java Operator SolrQuery")
@InputPorts({@InputPortSet(description="Port that ingests tuples", cardinality=1, optional=false, windowingMode=WindowMode.NonWindowed, windowPunctuationInputMode=WindowPunctuationInputMode.Oblivious), @InputPortSet(description="Optional input ports", optional=true, windowingMode=WindowMode.NonWindowed, windowPunctuationInputMode=WindowPunctuationInputMode.Oblivious)})
@OutputPorts({@OutputPortSet(description="Port that produces tuples", cardinality=1, optional=false, windowPunctuationOutputMode=WindowPunctuationOutputMode.Generating), @OutputPortSet(description="Optional output ports", optional=true, windowPunctuationOutputMode=WindowPunctuationOutputMode.Generating)})
public class SolrQueryOper extends AbstractOperator {
	private String responseFormat = "json";
	private int numberOfRows = 1;
	private boolean omitHeader = true;
	private boolean fullQueryProvided = false;
	private SolrQueryEngine queryEngine;
	
	private final Logger trace = Logger.getLogger(SolrQueryOper.class
			.getCanonicalName());
	private String solrURL = "http://localhost:8983/solr";
	private String collection = "";
	private String solrBaseURL;
	
	TupleAttribute<Tuple, String> queryAttribute;
	TupleAttribute<Tuple, String> collectionAttribute;

	@Parameter(optional = true, description = "Incoming attribute to be used as the query string. Example: \\\"*:*\\\"")
    public void setQueryAttribute(TupleAttribute<Tuple, String> attributeName){
		queryAttribute = attributeName;
    }
	
	@Parameter(optional = true, description = "Incoming attribute to be used as the collection name. This allows for querying different collection in every query.")
    public void setCollectionAttribute(TupleAttribute<Tuple, String> attributeName){
		collectionAttribute = attributeName;
    }
	
    /**
     * Initialize this operator. Called once before any tuples are processed.
     * @param context OperatorContext for this operator.
     * @throws Exception Operator failure, will cause the enclosing PE to terminate.
     */
	@Override
	public synchronized void initialize(OperatorContext context)
			throws Exception {
		super.initialize(context);
        Logger.getLogger(this.getClass()).trace("Operator " + context.getName() + " initializing in PE: " + context.getPE().getPEId() + " in Job: " + context.getPE().getJobId() );
        solrBaseURL = SolrUtils.getCollectionURL(solrURL, collection);
        queryEngine = new SolrQueryEngine(solrURL);
	}

    /**
     * Notification that initialization is complete and all input and output ports 
     * are connected and ready to receive and submit tuples.
     * @throws Exception Operator failure, will cause the enclosing PE to terminate.
     */
    @Override
    public synchronized void allPortsReady() throws Exception {
        OperatorContext context = getOperatorContext();
        Logger.getLogger(this.getClass()).trace("Operator " + context.getName() + " all ports are ready in PE: " + context.getPE().getPEId() + " in Job: " + context.getPE().getJobId() );
    }

    /**
     * Process an incoming tuple that arrived on the specified port.
     * <P>
     * Copy the incoming tuple to a new output tuple and submit to the output port. 
     * </P>
     * @param inputStream Port the tuple is arriving on.
     * @param tuple Object representing the incoming tuple.
     * @throws Exception Operator failure, will cause the enclosing PE to terminate.
     */
    @Override
    public final void process(StreamingInput<Tuple> inputStream, Tuple tuple)
            throws Exception {

    	// Create a new tuple for output port 0
        StreamingOutput<OutputTuple> outStream = getOutput(0);
        OutputTuple outTuple = outStream.newTuple();
        String queryString; 
        
        String queryLogic = tuple.getString(0);
        
		if (!fullQueryProvided){
			queryString = queryEngine.buildQuery(solrBaseURL, responseFormat, numberOfRows, omitHeader, queryLogic);//"http://g0601b02:8983/solr/transcriptions/select/?wt=xml&q=*:*%20AND%20starttime:[*%20TO%202016-09-09T9:23:43Z]&fl=id&rows=100";
		} else {
			queryString = queryLogic;
		}
		String queryResponse = queryEngine.sendQuery(collection, queryLogic);
		trace.log(TraceLevel.INFO, queryResponse);    
		
		outTuple.setString(0, queryResponse);
        outStream.submit(outTuple);
    }
    
    /**
     * Process an incoming punctuation that arrived on the specified port.
     * @param stream Port the punctuation is arriving on.
     * @param mark The punctuation mark
     * @throws Exception Operator failure, will cause the enclosing PE to terminate.
     */
    @Override
    public void processPunctuation(StreamingInput<Tuple> stream,
    		Punctuation mark) throws Exception {
    	// For window markers, punctuate all output ports 
    	super.processPunctuation(stream, mark);
    }
    
    @Parameter(optional = true)
    public void setSolrURL(String value){
    	solrURL = value;
    }
    
    @Parameter(optional = true)
    public void setCollection(String value){
    	collection = value;
    }
    
    @Parameter(optional = true)
    public void setResponseFormat(String value){
    	responseFormat = value;
    }
    
    @Parameter(optional = true)
    public void setNumberOfRows(int value){
    	numberOfRows = value;
    }
    
    @Parameter(optional = true)
    public void setOmitHeader(boolean value){
    	omitHeader = value;
    }
    
    @Parameter(optional = true)
    public void setFullQueryProvided(boolean value){
    	fullQueryProvided = value;
    }

    /**
     * Shutdown this operator.
     * @throws Exception Operator failure, will cause the enclosing PE to terminate.
     */
    public synchronized void shutdown() throws Exception {
        OperatorContext context = getOperatorContext();
        Logger.getLogger(this.getClass()).trace("Operator " + context.getName() + " shutting down in PE: " + context.getPE().getPEId() + " in Job: " + context.getPE().getJobId() );        // Must call super.shutdown()
        super.shutdown();
    }
}
